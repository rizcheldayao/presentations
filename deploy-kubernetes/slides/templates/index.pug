//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block append config
  -
    config.title = 'Why Kubernetes: Finding the Best Solution for You ';
    config.description = 'Deploy an application on Kubernetes';
  -

//- Add your slides here. See templates/includes/_mixins.pug for information
//- on how `+slide` works.

block theme
  link(rel="stylesheet" href="css/theme/white.css" id="theme")

block slides
  +slide
    <div style="display: flex; justify-content: flex-start; flex-direction: column">
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em"><span style="opacity: 0.5; padding-right: 10px; font-size: 1em">Why</span> Kubernetes: </h3></di>
    <div><h3 style="margin: 0px; display: flex; opacity: 0.5; font-size: 1.3em">Finding the</h3>
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em">best <span style="opacity: 0.5; padding-left: 10px; font-size: 1em">solution</span></h3></div>
    <div><h3 style="margin: 0px; display: flex;  font-size: 1.3em"> <span style="opacity: 0.5; padding-right: 10px;">for</span> you</h3></div>
    <p style="display: flex; font-size: 24px; font-weight: 200"> Rizchel Dayao
    <p style="display: flex; font-size: 24px; font-weight: 200">@rizcheldayao || rdayao@us.ibm.com
    </div>

  +slide
    <div style="display:flex; flex-direction: column; align-items: flex-start">
    h3 Nice to meet you üëãüèº
    <div style="display:flex; justify-content:space-between">
    <div style="padding-top: 5%; font-weight: 200; text-align: left">
    li Graduated from ASU in Computer Science
    li Developer Advocate @IBM
    li Previously Front End Developer
    li Harry Potter fanatic ‚ö°Ô∏è
    </div>
    <div><img style="border-radius: 50%"src="https://user-images.githubusercontent.com/18426780/36912901-71fc797e-1e05-11e8-8e83-9dd223120f2b.jpg" alt="Speaker picture" height="200"></div>
    </div>
    </div>

    <aside class="notes">
      p Talk about school, background
    </aside>

  +slide
    <img style="border:none; width: 700px; height: 700px; margin: 0" src="./img/lifecycle.png" alt="Software Lifecycle" height="500">

  +slide
    <img style="border:none;" src="./img/gatsby.jpg" alt="Gatsby meme" height="500">

  +slide
    <img style="border:none;" src="./img/not-my-problem.jpeg" alt="Not problem meme" height="500">

  +slide
    <h4> I switched teams... <span class="fragment" data-fragment-index="1">and I wanted to  <span style="color: navy">learn</span> how the  <span style="color: navy">deployment</span> process worked üöÄ</span></h4>

  +slide
    <iframe src="https://giphy.com/embed/VGG8UY1nEl66Y" width="480" height="392" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

  +slide
    <h4> I started researching all the different ways to deploy an app... <span class="fragment" data-fragment-index="1">But I was <span style="color: orange">overwhelmed</span> with all of the deployment choices üò©</span></h4>

  +slide
    <img style="border:none; height: 600px" src="./img/overwhelmed.png" alt="Emoji thinking" height="500">

  +slide
    h3 Ultimately, I decided to use <span style="color: navy">Kubernetes</span>

  +slide
    <div style="text-align: left">
    h3 Reasons:
    li.fragment Learn about containers and Docker
    li.fragment Community support & documentation
    li.fragment Automation
    li.fragment Scalability

  +slide
    <div style="text-align: left">
    p What is Kubernetes?
    p Kubernetes is an open-source system for <span style="color: navy">automating</span> deployment, <span style="color: navy">scaling</span>, and <span style="color: navy">management</span> of containerized applications.
    <p style="font-size: 20px">  - https://kubernetes.io/

  +slide
    h3 But first, let's look into  <span style="color: navy">containers</span>

  +slide
    <div style="text-align: left">
    h3 What are containers?
    li.fragment Made up of container images
    li.fragment Consists of an executable package of an application (libraries, dependencies, etc)
    li.fragment Operating system level virtualization
    li.fragment Multiple containers can run on top of OS kernel directly

  +slide
    <img style="border:none;" src="./img/containers.png" alt="Container architecture" height="500">
    <p style="color: #000; font-weight: 200; font-size: 20px"> https://cloud.google.com/containers/

    <aside class="notes">
      p etcd: backing store for all cluster data.
      p server: validates and configures data for the api objects which include pods, services, replicationcontrollers, and others
      p scheduler/controller: assigns nodes to pods, node controller
      p kubelet: takes in yaml and ensure container is described & healthy/running
      p proxy: provides load balancing
    </aside>

  +slide
    <div style="text-align: left">
    h3 Benefits:
    li.fragment Lightweight & performant
    li.fragment Platform independent
    li.fragment Isolation & resource sharing
    li.fragment Ideal for microservice architectures
    <aside class="notes">
      p All Containers config are isolated but share resources at kernel level (cpu, memory, etc)
    </aside>

  +slide
    h3 How do we  <span style="color: navy">package</span> our  <span style="color: navy">application</span> to a  <span style="color: navy">container</span>?

  +slide
    <div style="text-align: left">
    p That's where Docker comes into play...
    <p class="fragment" data-fragment-index="1"> Docker is an open platform for developers and sysadmins to <span style="color: navy">build, ship, and run</span> distributed applications, whether on laptops, data center VMs, or the cloud.
    <p class="fragment" data-fragment-index="1" style="font-size: 20px"> - https://www.docker.com/

  +slide
    h3 Let's  <span style="color: navy">containerize</span> a  <span style="color: navy">React</span> application!

  +slide
    <div style="text-align: left">
    h3 Repo:
    li.fragment https://github.com/IBM/deploy-react-kubernetes
    li.fragment Foundation is on Node.js
    li.fragment Uses the OMDb API
    li.fragment One application

  +slide
    <div style="text-align: left">
    <img style="border:none;" src="https://camo.githubusercontent.com/69187f55f40866c69d68be745a74abe9f707f3f0/68747470733a2f2f6d656469612e6769746875622e69626d2e636f6d2f757365722f313635302f66696c65732f62306339383864632d333161612d313165382d383637622d393535386435363130636437" alt="Container architecture" height="500"/>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">01</h4>
    <h2 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Create <span style="color: navy">Dockerfile</span></h2>
    </div>

  +slide
    <div style="text-align: left">
    h3 Dockerfile:
    li.fragment Used by Docker to build an image
    li.fragment Document that contains the commands to build an image
    li.fragment Examples: base image, exposed port, etc.

  +slide
    <section data-background-image="./img/Dockerfile.png" data-background-size="contain" data-background-position="left">
    </section>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">02</h4>
    <h2 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);"> <span style="color: navy">Build</span> Docker image</h2>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p ## Build in the directory the Dockerfile exists
    p $ export docker_username=<span style="color: #FF69B4">[DOCKER_USERNAME]<span>
    p $ docker build  -t $docker_username/app-image .
    <p class="fragment" data-fragment-index="1"> Sending build context to Docker daemon  856.6kB
    <p class="fragment" data-fragment-index="1">Step 1/8 : FROM node:9.4
    <p class="fragment" data-fragment-index="2">...
    <p class="fragment" data-fragment-index="3">Successfully tagged <span style="color: #FF69B4">[DOCKER_USERNAME]</span>/app-image:latest

    <aside class="notes">
      p . is path is .
      p -f: specify location of Dockerfile
    </aside>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">02</h4>
    <h2 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);"><span style="color: navy">Run</span> image</h2>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ docker run -p 3000:3000 -d $docker_username/app-image
    p.fragment 1540b75702a387a2e1fed754a89f

    <aside class="notes">
      p -p: Publish a container‚Äôs port(s) to the host
      p -d: Run container in background and print container ID
      p run: Run a command in a new container
    </aside>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">03</h4>
    <h2 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);"><span style="color: navy">Access</span> it locally</h2>
    </div>

  +slide
    h3 Now let's <span style="color: navy">deploy</span> our containerized application using <span style="color: navy">IBM Cloud</span>

  +slide
    <div style="text-align: left">
    h3 Kubernetes definitions:
    li.fragment  Cluster: Consist of a cluster master and multiple worker machines
    li.fragment Node: Worker machine that run applications managed by the cluster master
    li.fragment Pod: Contains a group of one or more containers with shared resources

  +slide
    <img style="border:none; height: 600px" src="./img/kubernetes-architecture.jpg" alt="Kubernetes architecture" height="500">
    <p style="color:#000; font-size: 20px"> http://nishadikirielle.blogspot.se/2016/02/kubernetes-at-first-glance.html

  +slide
    <div style="text-align: left">
    h3 Some prerequisites needed:
    li.fragment IBM Cloud Account
    li.fragment Install IBM Cloud CLI
    li.fragment Install the IBM Cloud Container Registry CLI
    li.fragment Install Kubernetes command-line tool, kubectl

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">01</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Create <span style="color: navy">Kubernetes</span> cluster</h3>
    </div>

  +slide
    <section data-background-image="./img/kubernetes-search.png" data-background-size="contain">
    </section>

  +slide
    <section data-background-image="./img/kubernetes-create.png" data-background-size="contain">
    </section>

  +slide
    <section data-background-image="./img/kubernetes-dashboard.png" data-background-size="contain">
    </section>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ bx cs cluster-config <span style="color: #FF69B4">[CLUSTER_NAME]</span>
    p.fragment export KUBECONFIG= /Users/ibm/.bluemix/plugins/container-service/clusters/rizchel-cluster/kube-config-dal1-rizchel-cluster.yml

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">02</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Create <span style="color: navy">namespace</span></h3>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ bx cr namespace-add <span style="color: #FF69B4">[NAMESPACE]</span>
    p.fragment Adding namespace '<span style="color: #00f9ff">rdayao</span>'...
    p.fragment Successfully added namespace '<span style="color: #00f9ff">rdayao</span>'
    p.fragment <span style="color: #39ff14">OK</span>


  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">03</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Build the image in <span style="color: navy">IBM Container Registry</span></h3>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ bx cr build -t registry.<span style="color: #FF69B4">[IBM_CLOUD_REGION]</span>.bluemix.net/<span style="color: #FF69B4">[NAMESPACE]</span>/deploy-react-kubernetes .
    <p class="fragment" data-fragment-index="1"> Sending build context to Docker daemon  861.7kB
    <p class="fragment" data-fragment-index="1">Step 1/8 : FROM node:9.4
    <p class="fragment" data-fragment-index="2">...
    <p class="fragment" data-fragment-index="3"><span style="color: #39ff14">OK</span>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">04</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Run the <span style="color: navy">container</span> on a <span style="color: navy">cluster</span></h3>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ kubectl run app-deployment --image=registry.<span style="color: #FF69B4">[IBM_CLOUD_REGION]</span>.bluemix.net/<span style="color: #FF69B4">[NAMESPACE]</span>/deploy-react-kubernetes
    p.fragment deployment "app-deployment" created

    <aside class="notes">
      p The Deployment instructs Kubernetes how to create and update instances of your application.
      p Cluster master schedules application instances onto individual Nodes in the cluster.
      p run: Run a particular image on the cluster.
    </aside>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">05</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);">Create a <span style="color: navy">Service</span> to expose the <span style="color: navy">deployment</span></h3>
    </div>

  +slide
    <div style="text-align: left; color: #fff" >
    p $ kubectl expose deployment/app-deployment --type=NodePort --name=app-service --port=3000
    p.fragment service "app-service" exposed

    <aside class="notes">
      p expose application outside of cluster
      p create service of deployment
    </aside>

  +slide
    <div style="display: flex;">
    <h4 style="font-size: 10em; position: relative; opacity: 0.5">05</h4>
    <h3 style="position: absolute; top: 50%; left: 75%; transform: translate(-50%, -50%);"><span style="color: navy">Access</span> application</h3>
    </div>

  +slide
    <div style="color: #fff; text-align: left;" >
    p # Obtain public IP Address of cluster
    p $ bx cs workers <span style="color: #FF69B4">[CLUSTER_NAME]</span>
    <p class="fragment" data-fragment-index="1"> # Obtain the NodePort of the service
    <p class="fragment" data-fragment-index="1"> $ kubectl describe service app-service
    <p class="fragment" data-fragment-index="2"> # Access it at <span style="color: #00f9ff">http://[PUBLIC_IP_ADDRESS]:[NODEPORT]</span>

  +slide
    <section data-background-image="./img/local.png" data-background-size="contain">
    </section>

  +slide
    <div style="text-align: left">
    h3 Advantages:
    li.fragment Automation: scaling, self healing, rollouts/rollbacks, scheduling
    li.fragment Load balancing
    li.fragment Modularity
    li.fragment Open source

    <aside class="notes">
      p Scheduling: provides scheduler to launch container on cluster nodes.
      p Scaling: automatically scales the number of pods in deployment
      p Self Healing: monitor the health of pods and containers, and take immediate actions to resolve what issues it encounters.
      p Rollouts/rollbacks: Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources.
      p Load balancer: provides an externally-accessible IP address that sends traffic to the correct port on your cluster nodes
    </aside>

  +slide
    <div style="text-align: left">
    h3 Drawbacks:
    li.fragment Steep learning curve
    li.fragment Unneccessary overhead for small, simple apps
    li.fragment Set up

  +slide
   <div style="text-align: left">
   h3 Common pitfalls:
   li.fragment Configuration and set up
   li.fragment Misusing containers
   li.fragment Moving from beginner to advanced

  +slide
   <div style="text-align: left">
   h3 Next steps:
   li.fragment Continuous integration & deployments
   li.fragment Multiple containers
   li.fragment Testing with advanced features

  +slide
    <div style="text-align: center">
      h3 Thank you!
      <div><img style="border-radius: 50%" src="https://user-images.githubusercontent.com/18426780/36912901-71fc797e-1e05-11e8-8e83-9dd223120f2b.jpg" alt="Speaker picture" height="200"></div>
      h3 Rizchel Dayao
      p Follow me on Twitter: @rizcheldayao
      p Slides available: https://goo.gl/cCdmyd
    </div>


  +slide
    <div style="text-align: left">
    h3 Resources
    <p style="font-size: 20px; margin: 0"> 1. Github Repo</p>
    <p style="font-size: 20px; color: navy">(https://github.com/IBM/deploy-react-kubernetes)</p>
    <p style="font-size: 20px; margin: 0"> 2. Docker</p>
    <p style="font-size: 20px; color: navy">(http://docker.com/)</p>
    <p style="font-size: 20px;"> 3. Kubernetes </p>
    <p style="font-size: 20px; color: navy">(https://kubernetes.io/)</p>
    <p style="font-size: 20px;"> 4. Blog post
    <p style="font-size: 20px; color: navy">(https://medium.com/@rizchel.a.dayao/my-journey-to-deploying-my-first-react-application-with-kubernetes-95e6d25f434d
    <p style="font-size: 20px;"> 5. Demo
    <p style="font-size: 20px; color: navy">(https://youtu.be/1Lq9vW3LuH8)</p>
    <p style="font-size: 20px;"> 6. IBM Cloud
    <p style="font-size: 20px; color: navy">(https://console.bluemix.net)</p>



