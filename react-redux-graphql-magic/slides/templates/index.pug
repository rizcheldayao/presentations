//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block append config
  -
    config.title = 'Building Enterprise Level Applications with the Magic of React, Redux, and GraphQL';
    config.description = 'Build applications with React, Redux and GraphQL to deploy on Kubernetes';
  -

//- Add your slides here. See templates/includes/_mixins.pug for information
//- on how `+slide` works.

block theme
  link(rel="stylesheet" href="css/theme/white.css" id="theme")

block slides
  +slide
    <section data-background-image="./img/athens.jpg">
    <div style="display: flex; justify-content: flex-start; flex-direction: column;">
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em"><span style="opacity: 0.5; padding-right: 10px; font-size: 1em">Building</span> Enterprise</h3></div>
    <div><h3 style="margin: 0px; display: flex; opacity: 0.5; font-size: 1.3em">Level Applications</h3>
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em"><span style="opacity: 0.5; padding-right: 10px; font-size: 1em">With The</span> Magic</h3></div>
    <div><h3 style="margin: 0px; display: flex;  font-size: 1.3em;"><span style="opacity: 0.5; padding-right: 10px;">of</span> React, Redux</h3></div>
    <div><h3 style="margin: 0px; display: flex;  font-size: 1.3em;"><span style="opacity: 0.5; padding-right: 10px;">and</span> GraphQL</h3></div>
    p(style="display: flex; font-size: 24px; font-weight: 200") Rizchel Dayao
    p(style="display: flex; font-size: 24px; font-weight: 200") @rizcheldayao || rdayao@us.ibm.com
    p(style="display: flex; font-size: 24px; font-weight: 200") Slides: https://goo.gl/uSuxXW
    </div>
    </section>

  +slide
    <section data-background-image="./img/rizchel.png">
    <div style="text-align: left">
    h3 Nice to meet you üëãüèº
    li Previously Front End Developer
    li Developer Advocate @IBM
    li James Bond
    </div>
    </section>

    <aside class="notes">
      p Talk about school, background
    </aside>

  +slide
   h2 Building enterprise applications is hard

  +slide
   <iframe src="https://giphy.com/embed/n4WpP39mwWrmg" width="800" height="450" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
   h4(style="color: #000") It can make you feel like a queen (or king) when you're on a roll

  +slide
   <iframe src="https://giphy.com/embed/FXGoDrsgrNLj2" width="800" height="450" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
   h4(style="color: #000") Or it can make you feel like throwing your computer if things aren't going well

  +slide
    <section data-background-image="./img/notre-dame.jpg" >
    <h4 style="background:rgba(255,255,255,0.75); color: #000">One of the most challenging tasks is designing the architecture and set up</h4>
    </section>

  +slide
    <section data-background-image="./img/legos.jpg" >
    <div style="background:rgba(255,255,255,0.8); color: #000; text-align: left; padding: 10px">
    h3(style="color: #000") There are so many things we have to consider:
    p.fragment 1. What developer tools (language, library, etc) best meet our needs?
    p.fragment 2. How do we manage our internal and external data within our microservice?
    p.fragment 3. How do we maintain clean and consistent code?
    p.fragment 4. How do we create a consistent way to configure and deploy all our microservices?
    </div>
    </section>

  +slide
    <img style="border:none;" src="./img/anchorman.jpg" alt="Anchorman meme" height="500">

  +slide
    h2 Our team was tasked to create a new front end microservice for our virtual server ordering experience in IBM Cloud

  +slide
    h4 Like any project, we had certain requirements to consider:
    li.fragment Was this even possible to integrate Softlayer APIs into the IBM Cloud platform?
    li.fragment New microservice that fit into the existing ecosystem
    li.fragment Consume both IBM Cloud & Softlayer APIs
    li.fragment Testing & component based architecture

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #1: What developer tools best meet our needs?
    p.fragment(style="padding: 10px") React, ES6, Express, Webpack

  +slide
    h3 Why did we choose React?
    li.fragment Reusable components
    li.fragment Fast render with Virtual DOM
    li.fragment Redux state management
    li.fragment Data binding
    li.fragment Carbon components library

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.2" src="./img/react.png" alt="React logo" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") React is a JavaScript library for building user interfaces
    li.fragment Functions as the view layer
    li.fragment Component based
    li.fragment Virtual DOM
    li.fragment Declarative
    li.fragment JSX
    </div>
    <div>

  +slide
    <section data-background-image="./img/blueprint.jpg">
    h3(style="color: black; background:rgba(255,255,255,0.75)") Imagine we're building a house like an application
    </section>

  +slide
    <section data-background-image="./img/pyramid.png" data-background-size="contain">
    </section>

  +slide
    <section data-background-image="./img/kitchen.png">
    </section>

  +slide
    h3(style="color: #19a68f") React containers
    <div style="display: flex; ">
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f; ") Stove
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Made up by smaller parts
    <p class="fragment" data-fragment-index="2"> Manages everything within its ecosystem
    <p class="fragment" data-fragment-index="3"> Passes the state to smaller parts
    </div>
    </div>
    <div style="color: black; border: 2px solid #19a68f; margin-left: 100px">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f;") Containers
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Made up of smaller elements called components
    <p class="fragment" data-fragment-index="2"> Manages all of the data
    <p class="fragment" data-fragment-index="3"> Passes data as props to components
    </div>
    </div>
    </div>

  +slide
    h3(style="color: #19a68f") React components
    <div style="display: flex; ">
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f; ") Stove burner
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Reusable piece
    <p class="fragment" data-fragment-index="2"> Receive data and state from stove
    </div>
    </div>
    <div style="color: black; border: 2px solid #19a68f; margin-left: 100px">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f;") Components
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Reusable in multiple parts of an application
    <p class="fragment" data-fragment-index="2"> Receives data and state from container
    <p class="fragment" data-fragment-index="3"> Accept data from containers through props
    </div>
    </div>
    </div>

  +slide
    <section data-background-image="./img/developer.jpg">
    <h4 style="background:#000; color: #fff">A separation of concerns allows an application to be easier to manage and provides cleaner code
    </section>

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.2" src="./img/redux.png" alt="Redux flow" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Redux is a JavaScript library for managing application state:
    li.fragment Actions describe something has happened
    li.fragment Reducers update the state
    li.fragment Store holds the application state
    </div>
    <div>

  +slide
    <img style="border:none;" src="./img/redux-flow.png" alt="Redux flow" height="500">
    p(style="font-size: 20px; color: #000") https://stackoverflow.com/questions/45416237/axios-calls-in-actions-redux/45425055

  +slide
    <section data-background-image="./img/background.png">
    <div style="text-align: left; display: flex; ">
    <div style="color: #fff;">
    h3(style="text-align: left") Kitchen:
    <p class="fragment" data-fragment-index="1"> 1. A user would turn on the stove burner
    <p class="fragment" data-fragment-index="2"> 2. TURN_ON_STOVE action
    <p class="fragment" data-fragment-index="3"> 3. State of the stove is ON
    </div>
    <div style="color: #19a68f; padding-left: 150px">
    h3(style="text-align: left; color: #19a68f") Redux:
    <p class="fragment" data-fragment-index="1">  => trigger action
    <p class="fragment" data-fragment-index="2"> => sent to the reducer
    <p class="fragment" data-fragment-index="3"> => state of the store is ON
    </div>
    </div>
    </section>

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #1: How do we manage our internal and external data within our microservice?
    p.fragment(style="padding: 10px") Redux and GraphQL


