//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block append config
  -
    config.title = 'Building Enterprise Level Applications with the Magic of React, Redux, and GraphQL';
    config.description = 'Build applications with React, Redux and GraphQL to deploy on Kubernetes';
  -

//- Add your slides here. See templates/includes/_mixins.pug for information
//- on how `+slide` works.

block theme
  link(rel="stylesheet" href="css/theme/white.css" id="theme")

block slides
  +slide
    <section data-background-image="./img/athens.jpg">
    <div style="display: flex; justify-content: flex-start; flex-direction: column;">
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em"><span style="opacity: 0.5; padding-right: 10px; font-size: 1em">Building</span> Enterprise</h3></div>
    <div><h3 style="margin: 0px; display: flex; opacity: 0.5; font-size: 1.3em">Level Applications</h3>
    <div><h3 style="margin: 0px; display: flex; font-size: 1.3em"><span style="opacity: 0.5; padding-right: 10px; font-size: 1em">With The</span> Magic</h3></div>
    <div><h3 style="margin: 0px; display: flex;  font-size: 1.3em;"><span style="opacity: 0.5; padding-right: 10px;">of</span> React, Redux</h3></div>
    <div><h3 style="margin: 0px; display: flex;  font-size: 1.3em;"><span style="opacity: 0.5; padding-right: 10px;">and</span> GraphQL</h3></div>
    p(style="display: flex; font-size: 24px; font-weight: 200") Rizchel Dayao
    p(style="display: flex; font-size: 24px; font-weight: 200") @rizcheldayao || rdayao@us.ibm.com
    p(style="display: flex; font-size: 24px; font-weight: 200") Slides: https://goo.gl/nY5RPG
    </div>
    </section>

  +slide
    <section data-background-image="./img/rizchel.png">
    <div style="text-align: left">
    h3 Nice to meet you üëãüèº
    li Previously Front End Developer
    li Developer Advocate @IBM
    li James Bond
    </div>
    </section>

    <aside class="notes">
      p Talk about school, background
    </aside>

  +slide
   h2(style="color:#000; font-size: 75px") Building enterprise applications is <span style="color:#19a68f">hard</span>

  +slide
   <iframe src="https://giphy.com/embed/n4WpP39mwWrmg" width="800" height="450" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
   h4(style="color: #000") It can make you feel like a queen (or king) when you're on a roll

  +slide
   <iframe src="https://giphy.com/embed/FXGoDrsgrNLj2" width="800" height="450" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
   h4(style="color: #000") Or it can make you feel like throwing your computer if things aren't going well

  +slide
    <section data-background-image="./img/notre-dame.jpg" >
    <h4 style="background:rgba(255,255,255,0.75); color: #000">One of the most challenging tasks is designing the architecture and set up</h4>
    </section>

  +slide
    <section data-background-image="./img/legos.jpg" >
    <div style="background:rgba(255,255,255,0.8); color: #000; text-align: left; padding: 10px">
    h3(style="color: #000") There are so many things we have to consider:
    p.fragment 1. What developer tools (language, library, etc) best meet our needs?
    p.fragment 2. How do we manage our internal and external data within our microservice?
    p.fragment 3. How do we maintain clean and consistent code?
    p.fragment 4. How do we create a consistent way to configure and deploy all our microservices?
    </div>
    </section>

  +slide
    <img style="border:none;" src="./img/anchorman.jpg" alt="Anchorman meme" height="500">

  +slide
    h3(style="color:#000; font-size: 90px") Our team was tasked to <span style="color:#19a68f">create</span> a new front end <span style="color:#19a68f">microservice</span>

  +slide
    <section data-background-image="./img/virtualserver.png" >
    </section>

  +slide
    <section data-background-image="./img/check.png" >
    <div style="background:rgba(255,255,255,0.75); color: #000; text-align: left; padding: 10px">
    h4(style="color: #000") Like any project, we had certain requirements to fulfill:
    li.fragment Was this even possible to integrate Softlayer APIs into the IBM Cloud platform?
    li.fragment New microservice that fit into the existing ecosystem
    li.fragment Consume both IBM Cloud & Softlayer APIs
    li.fragment Testing & component based architecture
    </div>
    </section>

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #1: What developer tools best meet our needs?
    p.fragment(style="padding: 10px") React, ES6, Express, Webpack

  +slide
    <section data-background-image="./img/door.jpg" >
    <div style="background:rgba(255,255,255,0.8); color: #000; text-align: left; padding: 10px">
    h3(style="color: #000")  Why did we choose React?
    li.fragment Reusable components
    li.fragment Fast render with Virtual DOM
    li.fragment Redux state management
    li.fragment Data binding
    li.fragment Carbon components library
    </div>
    </section>

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.2" src="./img/react.png" alt="React logo" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") React is a JavaScript library for building user interfaces
    li.fragment Functions as the view layer
    li.fragment Component based
    li.fragment Virtual DOM
    li.fragment JSX
    </div>
    <div>

  +slide
    <section data-background-image="./img/blueprint.jpg">
    h3(style="color: black; background:rgba(255,255,255,0.75)") Imagine we're building a house like an application
    </section>

  +slide
    <section data-background-image="./img/pyramid.png" data-background-size="contain">
    </section>

  +slide
    <section data-background-image="./img/kitchen.png">
    </section>

  +slide
    h3(style="color: #19a68f") React containers
    <div style="display: flex; ">
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f; ") Stove
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Made up by smaller parts
    <p class="fragment" data-fragment-index="2"> Manages everything within its ecosystem
    <p class="fragment" data-fragment-index="3"> Passes the state to smaller parts
    </div>
    </div>
    <div style="color: black; border: 2px solid #19a68f; margin-left: 100px">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f;") Containers
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Made up of smaller elements called components
    <p class="fragment" data-fragment-index="2"> Manages all of the data
    <p class="fragment" data-fragment-index="3"> Passes data as props to components
    </div>
    </div>
    </div>

  +slide
    h3(style="color: #19a68f") React components
    <div style="display: flex; ">
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f; ") Stove burner
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Reusable piece
    <p class="fragment" data-fragment-index="2"> Receive data and state from stove
    </div>
    </div>
    <div style="color: black; border: 2px solid #19a68f; margin-left: 100px">
    h4(style="color: #fff; background: #19a68f; border: 2px solid #19a68f;") Components
    <div style="color:#19a68f; padding: 5px">
    <p class="fragment" data-fragment-index="1"> Reusable in multiple parts of an application
    <p class="fragment" data-fragment-index="2"> Receives data and state from container
    <p class="fragment" data-fragment-index="3"> Accept data from containers through props
    </div>
    </div>
    </div>

  +slide
    <section data-background-image="./img/developer.jpg">
    <h4 style="background:#000; color: #fff">A separation of concerns allows an application to be easier to manage and provides cleaner code
    </section>

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.2" src="./img/redux.png" alt="Redux flow" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Redux is a JavaScript library for managing application state:
    li.fragment Actions describe something has happened
    li.fragment Reducers update the state
    li.fragment Store holds the application state
    </div>
    <div>

  +slide
    <img style="border:none;" src="./img/redux-flow.png" alt="Redux flow" height="500">
    p(style="font-size: 20px; color: #000") https://stackoverflow.com/questions/45416237/axios-calls-in-actions-redux/45425055

  +slide
    <section data-background-image="./img/background.png">
    <div style="text-align: left; display: flex; ">
    <div style="color: #fff;">
    h3(style="text-align: left") Kitchen:
    <p class="fragment" data-fragment-index="1"> 1. A user would turn on the stove burner
    <p class="fragment" data-fragment-index="2"> 2. TURN_ON_STOVE action
    <p class="fragment" data-fragment-index="3"> 3. State of the stove is ON
    </div>
    <div style="color: #19a68f; padding-left: 150px">
    h3(style="text-align: left; color: #19a68f") Redux:
    <p class="fragment" data-fragment-index="1">  => trigger action
    <p class="fragment" data-fragment-index="2"> => sent to the reducer
    <p class="fragment" data-fragment-index="3"> => state of the store is ON
    </div>
    </div>
    </section>

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #2: How do we manage our internal and external data within our microservice?
    p.fragment(style="padding: 10px") Redux and GraphQL

  +slide
    <div style="text-align: center">
    <iframe src="https://giphy.com/embed/bU3fK8ZpMYEFO" width="500" height="400" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
    <h3 style="text-align: center; color: #000"> GraphQL was life changing üôåüèº</h3>
    </div>

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.2" src="./img/graphql.png" alt="GraphQL" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") GraphQL is a data query language for your APIs:
    li.fragment Send GraphQL query and get exactly what you need
    li.fragment Gets many resources in a single request
    li.fragment Apollo client cache query results
    li.fragment Support local, offline development
    </div>
    <div>

  +slide
    <img style="border:none;" src="./img/graphql-architecture.png" alt="GraphQL architecture" height="500" />

  +slide
    <div style="text-align: center">
      <img style="border: none;"src="https://user-images.githubusercontent.com/18426780/36912893-7102c2bc-1e05-11e8-8aee-06bf6b839226.png" alt="Apollo queries and mutations" height="500">
      <p style="opacity: 1; color: #000;">https://www.apollographql.com/client/</p>
    </div>

  +slide
    <img style="border:none;" src="./img/gramps.png" alt="Gramps" height="300" />

    <aside class="notes">
      p We created an internal package to allow independent data sources to be composed into a single GraphQL schema that was later open sourced...GrAMPS
    </aside>


  +slide
    <section data-background-image="./img/data.jpg">
    <div style="text-align: left;color: #000; background:rgba(255,255,255,0.7); padding: 10px">
    h3(style="color: #000") Data source breakdown:
    li.fragment Models: functions for the different calls made with the parameters
    li.fragment Resolvers: contain mutations and queries
    li.fragment Schema: schema of the api calls (parameters, returned data, types)
    li.fragment Mocks: mock local data using casual
    </div>
    </section>

  +slide
    <section data-background-image="./img/win.jpg">
    <div style="text-align: left;color: #000; background:rgba(255,255,255,0.9); padding: 10px">
    h3(style="color: #000")  This allowed:
    li.fragment A central GraphQL microservice that anyone could consume
    li.fragment An isolated data source for each microservice
    li.fragment Easy adoption
    li.fragment Better performance
    </div>
    </section>

  +slide
    h3(style="color:#000; font-size: 75px") To authenticate, we needed to create a <span style="color:#19a68f">middleware</span> layer

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.1" src="./img/express.png" alt="Express" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Middleware consist of a series of function calls:
    li.fragment Access request object, response object, and next middleware function
    li.fragment Able to make changes to request and response objects
    li.fragment Chain multiple functions
    </div>
    <div>

  +slide
    <div style="text-align: left; color: #fff; font-family: Courier New,Courier,Lucida Sans Typewriter,Lucida Typewriter,monospace; " >
    p function logger(req,res,next){
    p(style="padding-left: 100px")   console.log(new Date(), req.method, req.url);
    p(style="padding-left: 100px")    next();
    p }

  +slide
    <section data-background-image="./img/path.jpg">
    <div style="text-align: left;color: #000; background:rgba(255,255,255,0.75); padding: 10px">
    h3(style="color: #000") Middleware flow:
    p.fragment 1. Initiate authentication from the front end
    p.fragment 2. Specified routes in middleware
    p.fragment 3. Perform token exchange and send back auth object to front end
    p.fragment 4. Pass user id and token as props to containers
    </div>
    </section>

  +slide
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; padding: 1rem") Initiate authentication from front end:
    <div style="color:#19a68f; padding: 20px; text-align: left;">
    p.fragment Required user id and token in our React containers to make API calls
    p.fragment Made an XMLHttpRequest in componentWillMount lifecycle method
    p.fragment Specified the account id and URL to call in our middleware layer
    </div>
    </div>

    <aside class="notes">
      p The request only had a url and method
    </aside>


  +slide
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; border: padding: 1rem") Specified routes in middleware:
    <div style="color:#19a68f; padding: 20px; text-align: left;">
    p.fragment Used Express Router
    p.fragment router.get('/api/SLAuth', getSLID, getSLToken);
    </div>
    </div>

  +slide
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; padding: 1rem") Perform token exchange and send back to front end:
    <div style="color:#19a68f; padding: 20px; text-align: left;">
    p.fragment Searched accounts to get user id then sent the user id in the request object to the next function
    p.fragment Use Request library to make POST call for token
    p.fragment Send user id and token back as response
    p.fragment Response object was passed as props down to containers
    </div>
    </div>

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #3: How do we maintain clean and consistent code?
    p.fragment(style="padding: 10px") Testing and pull request reviews

  +slide
    h3(style="color: #000") Testing will make your life <span style="color:#19a68f">easier</span> in the long run

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.1" src="./img/jest.png" alt="Jest" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Jest and Enzyme are unit testing utilities to test a React application:
    li.fragment Shallow rendering
    li.fragment Full DOM rendering
    li.fragment Coverage reports
    li.fragment Snapshot testing
    li.fragment Functionality testing
    </div>
    <div>

    <aside class="notes">
      p Shallow rendering: Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.
      p Full DOM rendering (mount): Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs, or may require the full lifecycle in order to fully test the component. Full DOM rendering requires that a full DOM API be available at the global scope. This means that it must be run in an environment that at least ‚Äúlooks like‚Äù a browser environment.
      p Snapshot: A typical snapshot test case for a mobile app renders a UI component, takes a screenshot, then compares it to a reference image stored alongside the test.
    </aside>


  +slide
    <div style="color: black; border: 2px solid #19a68f">
    h4(style="color: #fff; background: #19a68f; padding: 1rem") Testing:
    <div style="color:#19a68f; padding: 20px; text-align: left;">
    p.fragment With mock data
    p.fragment By simulating events
    p.fragment For state or prop change
    p.fragment Test actions and reducers to equal the correct action and state
    p.fragment Require at least 75% testing coverage
    </div>
    </div>

  +slide
    <div style="position: relative; text-align: center;" >
    <img style="border:none; opacity: 0.1" src="./img/github.png" alt="GitHub" height="500">
    <div style="text-align: left;color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Pull requests show what someone has changed to push up to a GitHub repository:
    li.fragment Require at least 2 reviews
    li.fragment Pass all tests in the CI/CD pipeline
    li.fragment Ensures all code is reviewed by someone else
    </div>
    <div>

  +slide
    <div style="border: 5px solid #fff">
    h3(style="padding: 10px") Challenge #4: How do we create a consistent way to configure and deploy all our microservices?
    p.fragment(style="padding: 10px") Kubernetes

  +slide
    <div style="position: relative; text-align: center">
    <img style="border:none;opacity:0.2" src="./img/kubernetes.png" alt="Kubernetes logo" height="500">
    <div style="text-align: left; color: #000; position: absolute; top: 25%">
    h4(style="color: #000") Kubernetes is an orchestration tool:
    li.fragment Automates deployment
    li.fragment Manages the deployment & containerized applications
    </div>
    </div>

  +slide
    <section data-background-image="./img/house.jpg">
    h3(style="color: #fff; background:#000") Kubernetes is like the home builder in charge of scheduling and managing a house
    </section>

    <aside class="notes">
      p Kubernetes schedules pods go to which nodes, manage deployment
    </aside>

  +slide
    <section data-background-image="./img/background.png">
    <div style="text-align: left; display: flex; ">
    <div style="color: #fff;">
    h3(style="text-align: left") Kubernetes definitions:
    <li class="fragment" data-fragment-index="1"> Cluster: Consist of a cluster master and multiple worker machines
    <li class="fragment" data-fragment-index="3"> Node: Worker machine that run applications managed by the cluster master
    <li class="fragment" data-fragment-index="5"> Pod: Usually contains one container
    </div>
    <div style="color: #19a68f; padding-left: 150px">
    h3(style="text-align: left; color: #19a68f") House equivalents:
    <p class="fragment" data-fragment-index="2"> = Home builder company
    <p class="fragment" data-fragment-index="4" style="margin-top: 50px"> = Home builder employees
    <p class="fragment" data-fragment-index="6" style="margin-top: 100px"> = Room
    </div>
    </div>
    </section>


  +slide
    <section data-background-image="./img/rubik.jpg">
    <div style="text-align: left;color: #000; background:rgba(255,255,255,0.9); padding: 10px">
    h3(style="color: #000") Kubernetes at an enterprise scale:
    p.fragment 1. What happens if my app crashes?
    p.fragment 2. How can I roll out updates or rollbacks?
    p.fragment 3. What happens when I get an unexpected high influx of traffic?
    p.fragment 4. What will work best for my microservice architecture?
    </div>
    </section>

  +slide
    <div style="border: 5px solid #19a68f; color: ##19a68f">
    h3(style="padding: 10px; color: #19a68f") What happens if my app crashes?
    p.fragment(style="padding: 10px; color: #19a68f") Provides monitoring for pod health and restarts them in case of failure

  +slide
    <div style="border: 5px solid #19a68f; color: ##19a68f">
    h3(style="padding: 10px; color: #19a68f") How can I roll out updates or rollbacks?
    p.fragment(style="padding: 10px; color: #19a68f")  A user can roll out or rollback an update with zero downtime by incrementally updating Pods instances with new ones

  +slide
    <div style="border: 5px solid #19a68f; color: ##19a68f">
    h3(style="padding: 10px; color: #19a68f") What happens when I get an unexpected high influx of traffic?
    p.fragment(style="padding: 10px; color: #19a68f") Automatically scales the number of pods in deployment

  +slide
    <div style="border: 5px solid #19a68f; color: ##19a68f">
    h3(style="padding: 10px; color: #19a68f") What will work best for my microservice architecture?
    p.fragment(style="padding: 10px; color: #19a68f") Microservices can be packaged into containers which are each deployed as pods for isolation and resource sharing

  +slide
    h2(style="color:#000; font-size: 90px") We increased conversion by <span style="color: #19a68f">over 250% </span>

  +slide
    h2(style="color:#000; font-size: 90px") ...and we created a standard for future teams to follow</span>

  +slide
    <section data-background-image="./img/coffee.jpg" style="top: 0px">
    <div style="text-align: left;color: #000; background:rgba(255,255,255,0.5); padding: 10px">
    h4(style="color: #000") Recap:
    li React for building components and containers
    li GraphQL for making API calls and caching results
    li Redux to manage state and store API call responses
    li Use a middleware if applicable
    li Make sure to test and review everything!
    li Deploy on Kubernetes
    </div>
    </section>

  +slide
    <div style="text-align: center">
      h3 Thank you!
      <div><img style="border-radius: 50%" src="https://user-images.githubusercontent.com/18426780/36912901-71fc797e-1e05-11e8-8e83-9dd223120f2b.jpg" alt="Speaker picture" height="200"></div>
      h3 Rizchel Dayao
      p Follow me on Twitter: @rizcheldayao
      p Slides available: https://goo.gl/nY5RPG
    </div>


  +slide
    <div style="text-align: left">
    h3 Resources
    p(style="font-size: 20px; margin: 0") 1. Slides
    p(style="font-size: 20px; color: navy") (https://goo.gl/nY5RPG)
    p(style="font-size: 20px;") 2. GitHub Repo
    p(style="font-size: 20px; color: navy") (https://github.com/IBM/deploy-react-kubernetes)
    p(style="font-size: 20px;") 3. React & Kubernetes
    p(style="font-size: 20px; color: navy") (https://reactjs.org/, https://kubernetes.io/)
    p(style="font-size: 20px;") 4. GraphQL
    p(style="font-size: 20px; color: navy") (https://graphql.org/)
    p(style="font-size: 20px;") 5. Express Middleware
    p(style="font-size: 20px; color: navy") (https://expressjs.com/en/guide/using-middleware.html)
    p(style="font-size: 20px;") 6. Jest & Enzyme
    p(style="font-size: 20px; color: navy") (http://airbnb.io/enzyme/docs/guides/jest.html)
